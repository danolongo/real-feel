# CLS + MaxPool Ensemble Training Container for EC2
# Based on project pyproject.toml requirements
FROM nvidia/cuda:11.8-runtime-ubuntu22.04

# Set environment variables for Poetry and Python
ENV PYTHONUNBUFFERED=1
ENV POETRY_NO_INTERACTION=1
ENV POETRY_VENV_IN_PROJECT=1
ENV POETRY_CACHE_DIR=/opt/poetry_cache
ENV POETRY_HOME="/opt/poetry"
ENV POETRY_VERSION=1.8.2

# Install system dependencies including Python 3.11
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-venv \
    python3.11-dev \
    python3-pip \
    git \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 -
ENV PATH="$POETRY_HOME/bin:$PATH"

# Set work directory
WORKDIR /app

# Copy the entire project structure to maintain Poetry setup
COPY pyproject.toml poetry.lock* ./

# Install dependencies using Poetry (production only)
RUN poetry config virtualenvs.create false \
    && poetry install --only main \
    && rm -rf $POETRY_CACHE_DIR

# Copy source code
COPY src/ ./src/

# Set Python path to include src directory
ENV PYTHONPATH=/app/src

# Create directories for data, models, and logs
RUN mkdir -p /data /models /logs

# Set working directory to model directory for training script
WORKDIR /app/src/real_feel/textModel/real_feel_model

# Make training scripts executable
RUN chmod +x train_ensemble.py 2>/dev/null || true

# Expose any ports if needed (for monitoring/logging)
EXPOSE 8080

# Default command shows help
CMD ["python", "train_ensemble.py", "--help"]